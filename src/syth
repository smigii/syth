#!/usr/bin/env python3

from pathlib import Path
import argparse
import shlex
import json
import os
import re

# =============================================================================
# === Globals =================================================================

USER_HOME = Path.home()
USER_CONF = USER_HOME.joinpath(".config")
SYTH_ROOT = USER_CONF.joinpath("syth")
SYTH_MDLS = SYTH_ROOT.joinpath("modules")
SYTH_THMS = SYTH_ROOT.joinpath("themes")

if not USER_CONF.exists():
    os.mkdir(USER_CONF)

if not SYTH_ROOT.exists():
    os.mkdir(SYTH_ROOT)

# =============================================================================
# === Helpers =================================================================


def module_theme_path(module, theme):
    path = SYTH_MDLS.joinpath(module).joinpath("themes").joinpath(theme)
    return path


# =============================================================================
# === Symbol Map ==============================================================


class SymbolMap:

    def __init__(self):
        self.line_num = -1
        self.symbols = dict()
        self.modules = dict()
        self.path = None

    def error(self, msg):
        print("*** ERROR ***")
        print(f"Line {self.line_num + 1} of [{self.path}]\n{msg}")
        exit(1)

    def assert_assign_tokens(self, tokens):
        # [string|file] id = value
        if len(tokens) != 4:
            self.error(f"expected 4 tokens, got {len(tokens)} {tokens}")
        if tokens[1] in self.symbols:
            self.error(f"identifier [{id}] already exists")
        if tokens[2] != "=":
            self.error(f"invalid assignment syntax, expected \"=\" as 3rd token, got [{tokens[2]}]")

    def read_symbols(self, fpath):
        with open(fpath) as syth:
            self.path = fpath
            lines = syth.readlines()
            for self.line_num, line in enumerate(lines):
                tokens = shlex.split(line, comments=True, posix=False)

                if len(tokens) == 0:
                    continue

                if tokens[0] == 'include':
                    self.include_module(tokens)
                elif tokens[0] == 'string':
                    self.str_assign(tokens)
                elif tokens[0] == 'file':
                    self.file_assign(tokens)
                else:
                    self.error(f"invalid token [{tokens[0]}]")

        return self.symbols

    def str_assign(self, tokens):
        # string sid = "some string"
        # string sid = module.id
        self.assert_assign_tokens(tokens)

        sid = tokens[1]
        value = tokens[3]

        # Resolve string literal or module
        if value[0] == "\"" or value[0] == "\'":
            value = value.strip('\"\'')
        else:
            module_tokens = value.split(sep=".")
            if len(module_tokens) != 2:
                self.error(f"invalid module reference, expected form [module.id], got [{value}]")
            module = module_tokens[0]
            foreign_id = module_tokens[1]
            if module in self.modules:
                if foreign_id in self.modules[module]:
                    value = self.modules[module][foreign_id]
                else:
                    self.error(f"invalid id [{foreign_id}] for included module {module}")
            else:
                self.error(f"module [{module}] has not been included")

        self.symbols[sid] = value

    def file_assign(self, tokens):
        # file sid = "path"
        self.assert_assign_tokens(tokens)

        sid = tokens[1]
        value = tokens[3]

        if value[0] == "\"" or value[0] == "\'":
            value = value.strip('\"\'')

        path = Path(os.path.expanduser(value))
        if not path.is_absolute():
            path = SYTH_MDLS.joinpath(path)

        with open(path, 'r') as fobj:
            contents = fobj.read()
            if contents[-1] == "\n":
                contents = contents[:-1]
            self.symbols[sid] = contents

    def include_module(self, tokens):
        # include module::theme as sid
        module_token = tokens[1]
        sid = tokens[3]

        if len(tokens) != 4:
            self.error(f"expected 4 tokens, got {len(tokens)} {tokens}")

        if tokens[2] != "as":
            self.error(f"include statement invalid syntax, expected \"as\" as 3rd token, got [{tokens[2]}]")

        if sid in self.modules:
            self.error(f"module identifier [{sid}] already exists")

        module_tokens = module_token.split(sep='::')
        if len(module_tokens) != 2:
            self.error(f"invalid module reference, expected form [module::theme], got [{module_token}]")

        module = module_tokens[0]
        theme = module_tokens[1] + ".syth"
        path = module_theme_path(module, theme)
        if not path.exists():
            self.error(f"specified module and path does not exist [{path}]")
        symbols = SymbolMap().read_symbols(path)
        self.modules[sid] = symbols


# =============================================================================
# === Templates ===============================================================


class Template:

    def __init__(self):
        self.open_brace = ['[', '%']
        self.close_brace = ['%', ']']
        self.line_num = -1
        self.path = None
        self.dst_path = None
        self.post_script = None
        self.pre_script = None
        self.header_done = False
        self.symbols = None
        self.reggy = None
        self.out = None

    def error(self, msg):
        print("*** ERROR ***")
        print(f"Line {self.line_num + 1} of [{self.path}]\n{msg}")
        exit(1)

    def process(self, path, symbols):
        self.symbols = symbols
        self.path = path
        with open(path) as template:
            lines = template.readlines()
            for line_num, line in enumerate(lines):
                if self.header_done:
                    self.body_data(line)
                else:
                    self.header_data(line)

    def header_data(self, line):
        if line == "[% __END_HEADER__ %]\n":
            self.finalize_header()
            return

        tokens = shlex.split(line, comments=True, posix=True)

        if len(tokens) == 0:
            return
        if tokens[0] == "path":
            self.set_dst_path(tokens)
        elif tokens[0] == "braces":
            self.set_braces(tokens)
        else:
            self.error(f"unknown token [{tokens[0]}]")

    def finalize_header(self):
        if self.dst_path is None:
            self.error(f"path was not specified in template {self.path}")
        # TODO: yikes
        self.out = open(self.dst_path, 'w')
        re_lbrace = '\\' + '\\'.join(self.open_brace)
        re_rbrace = '\\' + '\\'.join(self.close_brace)
        self.reggy = re.compile(f"{re_lbrace}( )*[a-zA-Z0-9]*( )*{re_rbrace}")
        self.header_done = True

    def set_dst_path(self, tokens):
        if len(tokens) != 3:
            self.error(f"expected 3 tokens, got {len(tokens)} {tokens}")
        if tokens[1] != "=":
            self.error(f"invalid syntax, expected [\"=\"] as 2nd token, got [{tokens[1]}]")

        self.dst_path = Path(tokens[2])
        if not self.dst_path.exists():
            self.error(f"template destination path does not exist: {self.dst_path}")

    def set_braces(self, tokens):
        if len(tokens) != 4:
            self.error(f"expected 4 tokens, got {len(tokens)} {tokens}")
        if tokens[1] != "=":
            self.error(f"invalid syntax, expected [\"=\"] as 2nd token, got [{tokens[1]}]")
        self.open_brace = list(tokens[2])
        self.close_brace = list(tokens[3])

    def body_data(self, line):
        match = self.reggy.search(line)
        while match is not None:
            id = match.group()[len(self.open_brace):-len(self.close_brace)].strip()
            value = self.symbols[id]
            line = line[:match.start()] + value + line[match.end():]
            match = self.reggy.search(line)

        self.out.write(line)


# =============================================================================
# === Main ====================================================================


def main():

    # Args, TODO: --system and --module, default to --system
    parser = argparse.ArgumentParser(description="Systheme version 0.1.0")
    # parser.add_argument('-s', action='store_true', help='Simulation mode flag, no changes will be made to file system.')
    # parser.add_argument('-v', action='store_true', help='Verbose mode flag.')
    # parser.add_argument('-b', action='store_true', help='Backup mode flag, create a backup of each overwritten file.')
    # parser.add_argument('-c', action='store_true', help='Confirm mode flag, prompt confirmation before each overwrite.')
    parser.add_argument('theme', type=str, help="JSON theme file.")
    args = parser.parse_args()

    # Load JSON theme
    theme_path = SYTH_THMS.joinpath(args.theme)
    with open(theme_path, 'r') as theme_file:
        theme_json = json.load(theme_file)

    # Process theme
    for module in theme_json:
        theme = theme_json[module]
        module_path = module_theme_path(module, theme)
        template_path = SYTH_MDLS.joinpath(module).joinpath("template")
        # TODO: Prompt user when invalid path
        symbols = SymbolMap().read_symbols(module_path)
        Template().process(template_path, symbols)


if __name__ == "__main__":
    main()
